!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.tfd_semi.TFDSemi {
        which_set: 'semisupervised',
        one_hot: True,
        cold_hot: True,
        scale: True,
        center: True,
        shuffle: True,
        fold: %(fold_i)i,
    },
    model: !obj:pylearn2.models.graph_mlp.GraphMLP {
        input_space: &space !obj:pylearn2.space.Conv2DSpace {
                shape: [48,48],
                num_channels: 1,
        },
        input_source: 'features',
        layers: [!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'c0',
                     output_channels: %(channels_c0)i,
                     kernel_shape: [%(kernelshape_c0)i, %(kernelshape_c0)i],
                     pool_shape: [%(poolshape_c0)i, %(poolshape_c0)i],
                     pool_stride: [2, 2],
                     max_kernel_norm: %(max_kernel_norm_c0)f,
                     irange: %(irange_c0)f,
                 },  !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h1',
                     dim: 2000,
                     istdev: 1.41421356237,
                     ortho_init: True,
                     max_col_norm: .9,
                 },  !obj:pylearn2.models.flattener.FlattenerLayer {
                     raw_layer: !obj:pylearn2.models.mlp.CompositeLayer {
                         layer_name: 'composite',
                         layers: [ &yh !obj:pylearn2.models.mlp.Linear {
                                     layer_name: 'y_h',
                                     dim: 7,
                                     istdev: 1.,
                                     ortho_init: True,
                                     max_col_norm: .9,
                                 }, &zh !obj:pylearn2.models.mlp.Linear {
                                         layer_name: 'z_h',
                                         dim: 2000,
                                         istdev: 1.,
                                         ortho_init: True,
                                         max_col_norm: .9,
                                 } ]
                      }
                 }, !obj:pylearn2.models.mlp.CompositeLayer { 
                        layer_name: 'composite2',
                        inputs_to_layers: {0: [1],
                                           1: [0,1]}
                        layers: [
                                !obj:pylearn2.models.mlp.MLP {
                                    layers: [
                                        !obj:pylearn2.sandbox.grad_reverse.grad_reverse.GradReverseLayer {
                                            layer_name: 'reverse_layer'
                                        },
                                        !obj:pylearn2.models.mlp.Linear {
                                            layer_name: 'reverse_h1'
                                            dim: 10,
                                            istdev: 1.,
                                            ortho_init: True,
                                            max_col_norm: .9,
                                        },
                                    ]
                                },
                                !obj:pylearn2.models.mlp.RectifiedLinear {
                                     layer_name: 'h_2',
                                     dim: 2000,
                                     istdev: 1.41421356237,
                                     ortho_init: True,
                                     max_col_norm: .9,
                                }
                            ]
                 },  !obj:pylearn2.models.mlp.CompositeLayer {
                     layer_name: 'composite3',
                     inputs_to_layers: {0: [],
                                        1: [0]},
                     layers: [!obj:pylearn2.models.mlp.RectifiedLinear {
                         layer_name: 'h_1',
                         dim: 2000,
                         istdev: 1.41421356237,
                         ortho_init: True,
                         max_col_norm: .9,
                     }],
                 },  !obj:pylearn2.models.mlp.Linear {
                     layer_name: 'h_0',
                     dim: 2304,
                     istdev: 1.,
                     ortho_init: True,
                     max_col_norm: %(max_col_norm_h_0)f,
                 },  &rec !obj:pylearn2.models.mlp.SpaceConverter {
                     layer_name: 'converter',
                     output_space: *space,
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 64,
        learning_rate: .000000001,
        train_iteration_mode: 'random_slice',
        batches_per_iter: 50,
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
                [%(beta)f, !obj:pylearn2.costs.mlp.layer_cost.LayerCost {
                    layer: *yh,
                    input_source: 'labeled',
                    target_source: 'labels',
                    cost: !obj:pylearn2.costs.mlp.layer_cost.HingeL2 {}
                } ],
                [%(alpha)f, &mse !obj:pylearn2.costs.mlp.layer_cost.LayerCost {
                    layer: *rec,
                    input_source: 'features',
                    target_source: 'targets',
                    cost: !obj:pylearn2.costs.mlp.layer_cost.MSE {}
                } ],
                [%(gamma)f, !obj:pylearn2.costs.mlp.layer_cost.XCov {
                    layerset_1: [*yh],
                    layerset_2: [*zh],
                    input_source: 'features',
                } ]
            ]
        },
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.datasets.tfd_semi.TFDSemi {
                              which_set: 'valid',
                              one_hot: True,
                              cold_hot: True,
                              scale: True,
                              center: True,
                              shuffle: True,
                              fold: %(fold_i)i,
                          },
            },
        monitoring_costs: {
                            'misclass': !obj:pylearn2.costs.mlp.layer_cost.LayerCost {
                                    layer: *yh,
                                    input_source: 'labeled',
                                    target_source: 'labels',
                                    cost: !obj:pylearn2.costs.mlp.layer_cost.Misclass {},
                            },
                            'mse': *mse
                          },
        monitoring_batches: 1,
        monitoring_batch_size: %(valid_batch_size)i,
        monitor_iteration_mode: 'random_slice',
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.AdaDelta {
                decay: .99,
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_misclass",
                    prop_decrease: 0.,
                    N: 50
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                }
            ]
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_misclass',
             save_path: "%(filename)s"
        }
    ]
}
